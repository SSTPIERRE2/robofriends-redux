{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundry.tsx","components/CounterButton.tsx","components/Header.tsx","components/MainPage/MainPage.tsx","api/api.ts","containers/App.tsx","actions.ts","constants.ts","registerServiceWorker.js","reducers.ts","index.tsx"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","CounterButton","count","nextProps","nextState","onClick","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","ErrorBoundry","apiCall","link","fetch","then","response","json","App","connect","searchRobots","requestRobots","dispatch","event","payload","currentTarget","value","data","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0b9fca50.chunk.js","sourcesContent":["import React from 'react';\nimport { Robot } from '../types';\n\nconst Card: React.SFC<Robot> = ({ name, email, id }) => {\n    return (\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { Robot } from '../types';\n\ninterface Props {\n    robots: Robot[];\n}\n\nconst CardList = ({ robots = [] }: Props): JSX.Element => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardList;\n","import React from 'react';\nimport { ChangeSearchFieldAction } from '../constants';\n\ninterface Props {\n    searchChange: (\n        event: React.SyntheticEvent<HTMLInputElement>\n    ) => ChangeSearchFieldAction;\n}\n\nconst SearchBox: React.FC<Props> = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                aria-label=\"Search Robots\"\n                name=\"searchBox\"\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\ntype Props = {\n    children?: JSX.Element;\n};\n\nconst Scroll: React.FC<Props> = (props) => {\n    return (\n        <div\n            style={{\n                overflow: 'scroll',\n                border: '5px solid black',\n                height: '800px',\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\ninterface Props {\n    children?: React.ReactNode;\n}\n\nclass ErrorBoundary extends Component<Props, { hasError: boolean }> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    componentDidCatch(): void {\n        this.setState({ hasError: true });\n    }\n\n    render(): JSX.Element | React.ReactNode {\n        if (this.state.hasError) {\n            return <h1>Something went wrong.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\ninterface State {\n    count: number;\n}\n\nclass CounterButton extends Component<Record<string, unknown>, State> {\n    constructor(props: null) {\n        super(props);\n        this.state = { count: 1 };\n    }\n\n    shouldComponentUpdate(nextProps: null, nextState: State) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <button\n                onClick={() =>\n                    this.setState((state) => ({ count: state.count + 1 }))\n                }\n            >\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n    shouldComponentUpdate(): boolean {\n        return false;\n    }\n    render(): JSX.Element {\n        return (\n            <div>\n                <h1 className=\"f1\">RoboFriends</h1>\n                <CounterButton />\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport CardList from '../CardList';\nimport SearchBox from '../SearchBox';\nimport Scroll from '../Scroll';\nimport ErrorBoundry from '../ErrorBoundry';\nimport './mainPage.css';\nimport Header from '../Header';\nimport { Robot } from '../../types';\nimport { AppProps } from '../../containers/App';\n\nclass MainPage extends Component<AppProps> {\n    componentDidMount(): void {\n        this.props.onRequestRobots();\n    }\n\n    filterRobots = (): Robot[] =>\n        this.props.robots.filter((robot) => {\n            return robot.name\n                .toLowerCase()\n                .includes(this.props.searchField.toLowerCase());\n        });\n\n    render(): JSX.Element {\n        const { onSearchChange, isPending } = this.props;\n\n        return (\n            <div className=\"tc\">\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    {isPending ? (\n                        <h1>Loading</h1>\n                    ) : (\n                        <ErrorBoundry>\n                            <CardList robots={this.filterRobots()} />\n                        </ErrorBoundry>\n                    )}\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;\n","export const apiCall = (link: string) =>\n    fetch(link).then((response) => response.json());\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport MainPage from '../components/MainPage/MainPage';\nimport { apiCall } from '../api/api';\nimport { AnyAction } from 'redux';\nimport { AppState } from '../reducers';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { Robot } from '../types';\nimport {\n    ChangeSearchFieldAction,\n    RequestRobotsSuccessAction,\n    RequestRobotsFailedAction,\n} from '../constants';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state: AppState) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n    };\n};\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) =>\n            dispatch(setSearchField(event.currentTarget.value)),\n        onRequestRobots: () => dispatch(requestRobots(apiCall)),\n    };\n};\n\nexport interface AppProps {\n    searchField: string;\n    robots: Robot[];\n    isPending: boolean;\n    onSearchChange: (\n        event: React.SyntheticEvent<HTMLInputElement>\n    ) => ChangeSearchFieldAction;\n    onRequestRobots: () => Promise<\n        RequestRobotsSuccessAction | RequestRobotsFailedAction\n    >;\n}\n\nclass App extends Component<AppProps> {\n    render() {\n        return <MainPage {...this.props} />;\n    }\n}\n\n// const connector = connect(mapStateToProps, mapDispatchToProps);\n// action done from mapDispatchToProps will change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// export default connector(App);\n","import {\n    CHANGE_SEARCHFIELD,\n    ChangeSearchFieldAction,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    RequestRobotsSuccessAction,\n    RequestRobotsFailedAction,\n} from './constants';\nimport { Dispatch, AnyAction, ActionCreator } from 'redux';\nimport { Robot } from './types';\nimport { ThunkAction } from 'redux-thunk';\n\nexport type RobotApiCall = (link: string) => Promise<Robot[]>;\n\nexport const setSearchField = (text: string): ChangeSearchFieldAction => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text,\n});\n\n// Make sure to return the fetch/apiCall so testing thunks works\nexport const requestRobots: ActionCreator<ThunkAction<\n    Promise<RequestRobotsSuccessAction | RequestRobotsFailedAction>,\n    Robot[] | any,\n    RobotApiCall,\n    RequestRobotsSuccessAction | RequestRobotsFailedAction\n>> = (apiCall: RobotApiCall) => (dispatch: Dispatch<AnyAction>) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    return apiCall('https://jsonplaceholder.typicode.com/users')\n        .then((data) =>\n            dispatch({\n                type: REQUEST_ROBOTS_SUCCESS as REQUEST_ROBOTS_SUCCESS,\n                payload: data,\n            })\n        )\n        .catch((error) =>\n            dispatch({\n                type: REQUEST_ROBOTS_FAILED as REQUEST_ROBOTS_FAILED,\n                payload: error,\n            })\n        );\n};\n","import { Robot } from './types';\n\nexport const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport type CHANGE_SEARCHFIELD = typeof CHANGE_SEARCHFIELD;\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport type REQUEST_ROBOTS_PENDING = typeof REQUEST_ROBOTS_PENDING;\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport type REQUEST_ROBOTS_SUCCESS = typeof REQUEST_ROBOTS_SUCCESS;\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport type REQUEST_ROBOTS_FAILED = typeof REQUEST_ROBOTS_FAILED;\n\nexport interface ChangeSearchFieldAction {\n    type: CHANGE_SEARCHFIELD;\n    payload: string;\n}\n\nexport interface RequestRobotsPendingAction {\n    type: REQUEST_ROBOTS_PENDING;\n}\n\nexport interface RequestRobotsSuccessAction {\n    type: REQUEST_ROBOTS_SUCCESS;\n    payload: Robot[];\n}\n\nexport interface RequestRobotsFailedAction {\n    type: REQUEST_ROBOTS_FAILED;\n    payload: Error;\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    ChangeSearchFieldAction,\n    RequestRobotsPendingAction,\n    RequestRobotsSuccessAction,\n    RequestRobotsFailedAction,\n} from './constants';\nimport { Robot } from './types';\n\nexport interface AppState {\n    searchRobots: SearchRobots;\n    requestRobots: RequestRobots;\n}\n\nexport interface SearchRobots {\n    searchField: string;\n}\n\nexport const initialStateSearch: SearchRobots = {\n    searchField: '',\n};\n\nexport const searchRobots = (\n    state = initialStateSearch,\n    action: ChangeSearchFieldAction\n) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nexport interface RequestRobots {\n    robots: Robot[];\n    isPending: boolean;\n    error: boolean;\n}\n\nexport const initialStateRobots: RequestRobots = {\n    robots: [],\n    isPending: true,\n    error: false,\n};\n\nexport const requestRobots = (\n    state = initialStateRobots,\n    action:\n        | RequestRobotsPendingAction\n        | RequestRobotsSuccessAction\n        | RequestRobotsFailedAction\n) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {\n                robots: action.payload,\n                isPending: false,\n            });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload });\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots, AppState } from './reducers';\n\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers<AppState>({ requestRobots, searchRobots });\n\nconst store = createStore(\n    rootReducers,\n    applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}